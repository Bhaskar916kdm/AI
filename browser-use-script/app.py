#!/usr/bin/env python3
import click
import asyncio
from langchain_openai import ChatOpenAI
from browser_use import Agent
from typing import Optional
import os
from dotenv import load_dotenv
from datetime import datetime
import questionary
from rich.markdown import Markdown
from rich.console import Console

# Load environment variables
load_dotenv()

class BrowserUseCLI:
    def __init__(self, model: str = "gpt-4o", api_key: Optional[str] = None):
        if api_key:
            os.environ["OPENAI_API_KEY"] = api_key
        self.llm = ChatOpenAI(model=model)
        self.console = Console()
        
    async def execute_task(self, task: str) -> None:
        agent = Agent(
            task=task,
            llm=self.llm,
        )
        result = await agent.run()
        
        # Save result as markdown
        timestamp = datetime.now()
        formatted_date = timestamp.strftime("%B %d, %Y")
        formatted_time = timestamp.strftime("%I:%M:%S %p")
        filename = f"results/task_{timestamp.strftime('%Y%m%d_%H%M%S')}.md"
        
        # Create results directory if it doesn't exist
        os.makedirs("results", exist_ok=True)
        
        # Format the markdown content with improved structure
        markdown_content = f"""# Browser Task Execution Report

## Overview
- **Date**: {formatted_date}
- **Time**: {formatted_time}
- **Model**: {self.llm.model_name}

## Task Description
```
{task}
```

## Execution Result
{result}

---
*Generated by Browser Use CLI*
"""
        
        # Save to file
        with open(filename, "w", encoding="utf-8") as f:
            f.write(markdown_content)
            
        # Print formatted markdown to console
        self.console.print(f"\n📝 Result saved to: {filename}")
        self.console.print("\n📊 Result:")
        self.console.print(Markdown(markdown_content))

def prompt_for_task() -> str:
    """Prompt the user for a task description or exit command"""
    return questionary.text(
        "What task would you like to execute? (type 'exit' to quit)",
        validate=lambda text: len(text.strip()) > 0
    ).ask()

@click.group()
def cli():
    """Browser Use CLI - Automate browser tasks with AI"""
    pass

@cli.command()
@click.argument('task', required=False)
@click.option('--model', '-m', default="gpt-4o", help='OpenAI model to use')
@click.option('--api-key', '-k', help='OpenAI API key (optional if set in .env)')
def run(task: Optional[str], model: str, api_key: Optional[str]):
    """Execute browser automation tasks continuously"""
    browser_cli = BrowserUseCLI(model=model, api_key=api_key)
    
    # If initial task is provided, execute it
    if task:
        asyncio.run(browser_cli.execute_task(task))
    
    while True:
        task = prompt_for_task()
        if task.lower() == 'exit':
            click.echo("Goodbye!")
            break
        asyncio.run(browser_cli.execute_task(task))

@cli.command()
@click.argument('url')
@click.argument('query')
@click.option('--model', '-m', default="gpt-4o", help='OpenAI model to use')
@click.option('--api-key', '-k', help='OpenAI API key (optional if set in .env)')
def search(url: str, query: str, model: str, api_key: Optional[str]):
    """Search and extract information from a specific website"""
    task = f"Go to {url} and search for information about: {query}"
    browser_cli = BrowserUseCLI(model=model, api_key=api_key)
    asyncio.run(browser_cli.execute_task(task))

@cli.command()
@click.argument('from_location')
@click.argument('to_location')
@click.argument('date')
@click.option('--return-date', '-r', help='Return date for round trip')
@click.option('--model', '-m', default="gpt-4o", help='OpenAI model to use')
@click.option('--api-key', '-k', help='OpenAI API key (optional if set in .env)')
def flights(from_location: str, to_location: str, date: str, 
           return_date: Optional[str], model: str, api_key: Optional[str]):
    """Search for flights using Google Flights"""
    task = f"Find {'a one-way' if not return_date else ''} flight from {from_location} to {to_location} on {date}"
    if return_date:
        task += f" with return on {return_date}"
    task += " on Google Flights. Return me the cheapest option."
    
    browser_cli = BrowserUseCLI(model=model, api_key=api_key)
    asyncio.run(browser_cli.execute_task(task))

if __name__ == "__main__":
    cli()